---
title: "Classify-delphinID"
author: "Tristan Kleyn"
format: html
editor: visual
---

# **Train and test delphinID classifier models**

------------------------------------------------------------------------

## ‚ÑπÔ∏è About this notebook:

This is a Quarto notebook of markdown and R code for developing and testing delphinID acoustic classifier models through transfer learning techniques. Required for this is a .sqlite3 database containing delphinID classifications of detections made in PAMGuard with the Whistle & Moan Detector and/or Click Detector.

For more information, head to <https://github.com/tristankleyn/ClassifyStuff/tree/master>.

**Classify-delphinID is divided into the following sections:**

-   [‚öôÔ∏è Setting up] / load delphinID classifications from your PAMGuard database

-   \[Train and test delphinID classifier models\] / retrain delphinID classifiers on new prediction labels

Throughout the notebook, there are many parameters that can be adjusted to tailor the analysis to your specific needs. Any line of code that is adjustable is denoted with this green square üü©. It is advised to not adjust any code without a green square beside it. Different parameters involve different types of inputs. For example, the code cell below contains two adjustable parameters, one a binary variable (TRUE or FALSE) and one a character variable (any text input surrounded quotation marks). Code cells can be run by clicking the green triangle in the top right-hand corner.

**Try running the code cell below and adjusting its parameters to see changes in its output.**

```{r}
a <- 'chicken' #üü©
b <- 'egg' #üü©

print_sentence <- TRUE #üü©

if (print_sentence) {
  cat(sprintf('The %s came before the %s.', a, b))
}
```

The following "Setting up" section contains a code cell where general parameters used throughout the notebook can be adjusted. Look out for üü© symbols elsewhere for opportunities to tailor the analysis. Explanations for some parameters are provided within this notebook, while descriptions of all adjustable parameters can be found [here](https://github.com/tristankleyn/ClassifyStuff/tree/master).

‚ùï **IMPORTANT: Your IDE (RStudio, VS Code, etc.) will likely prompt you to install or update packages prior to using this script. You must do this in order for the script to run correctly. To check whether the required packages are installed on your system, run the cell below:**

```{r}
packages_to_install <- readLines('requirements-delphinID.txt')
packages_to_install <- packages_to_install[nchar(packages_to_install) > 0]
packages_to_install <- packages_to_install[!grepl("^#", packages_to_install)]

# Loop through the packages, install if not present
for (pkg in packages_to_install) {
  if (!requireNamespace(pkg, quietly = TRUE)) {
    message(paste("Package '", pkg, "' not found. Installing now...", sep = ""))
    install.packages(pkg, dependencies = TRUE)
    message(paste("Package '", pkg, "' installed successfully.", sep = ""))
  } else {
    message(paste("Package '", pkg, "' is already installed.", sep = ""))
  }
}

message("\nAll specified packages have been checked. Missing packages were installed.")
```

------------------------------------------------------------------------

## ‚öôÔ∏è Setting up

**Run the cell below to source required functions:**

```{r}
#| warning: false
#| message: false

source('Classify-delphinID_functions.R')
```

**Specify the location of your .sqlite3 database containing PAMGuard detections:**

-   **selectDB** \| path to PAMGuard database file (.sqlite3) containing detections.

-   **cTable** \| name of database table containing delphinID click classifications

-   **wTable** \| name of database table containing delphinID whistle classifications

```{r}
selectDB <- 'N1106.sqlite3' #üü©
classifierType <- 'delphinID'
model <- readRDS(sprintf('EventClassifier_%s.rds', classifierType))

cTable <- 'Deep_Learning_Classifier___Clicks' #üü©
wTable <- 'Deep_Learning_Classifier___Whistles' #üü©

```

### Compile PAMGuard output, classify events

The code below uses several functions to compile all delphinID classifications from the database and group them into distinct *acoustic events* for each different recording file analysed in the database (i.e. run through PAMGuard). Probabilities (per species) from all individual classifications within an event are averaged and divided by their sum to form event classification probabilities. Several parameters are available for filtering these events:

-   **evScore** \| minimum decision score threshold below which event classifications are discarded.

-   **minClicks** \| minimum number of click classifications below which event classifications are discarded.

-   **minWhistles** \| minimum number of whistle classifications below which event classifications are discarded.

-   **AndOr** \| require minWhistles 'AND' minClicks thresholds or minWhistles 'OR' minClicks thresholds.

-   **dataRange** \| date range for filtering events.

-   **export** \| whether or not to export event classification data to *classifications* folder (TRUE or FALSE)

-   **verbose** \| whether or not to print information during loading (TRUE or FALSE)

-   **plotType** \| type of plot outputted for visualizing event classifications ("Map" or "Counts")

```{r}
#| warning: false
#| message: false

#CLASSIFICATION PARAMETERS
evScore <- 0.0 #üü©
minClicks <- 0 #üü©
minWhistles <- 0 #üü©
AndOr <- 'or' #üü©
dateRange <- NULL #üü©
export <- TRUE #üü©
append_to_file <- NULL
verbose <- FALSE #üü©


eventInfo <- getEvents(selectDB = selectDB,
                       classifierType = classifierType,
                       wtable = wTable,
                       ctable = cTable, 
                       dateRange = dateRange,
                       verbose = verbose)

test_events <- eventInfo$test_events
df_whistles <- eventInfo$df_whistles
df_clicks <- eventInfo$df_clicks

predInfo <- getClassifications(test_events = test_events,
                               model = model,
                               classifierType = classifierType,
                               evScore = evScore,
                               minClicks = minClicks,
                               minWhistles = minWhistles,
                               AndOr = AndOr,
                               export = export,
                               append_to_file = append_to_file)

map <- plotClassifications(predInfo$preds, 
                           predInfo$PCAdf, 
                           classifierType=classifierType, 
                           evScore = evScore,
                           plotType = 'Map') #üü©
   
data.table(predInfo$preds)
```

------------------------------------------------------------------------

The two outputs produced by the code cell above are a PCA plot and a table, both showing all events classified. PCA coordinates are calculated from event feature vectors (i.e. barcodes in the table), while colours indicate predicted species and number labels in the scatter plot refer to the unique identifier (UID) values of different acoustic events, which match the UID values in the table. The table provides various pieces of information about each event classification:

-   **uid** \| unique identifier

-   **eventID** \| name of classified recording file

-   **clicks** \| number of click predictions (not individual clicks)

-   **whistles** \| number of whistle predictions (not individual whistles)

-   **minutes** \| difference in time from first to last prediction in file

-   **predictedSpecies** \| classified (most probable) species based on click and whistle predictions

-   **score** \| decision score of classification (product of decision confidence and prominence)

-   **prom** \| decision prominence of classification (difference in probability between most and second-most likely species)

-   **conf** \| decision confidence of classification (probability of most likely species)

-   **barcode** \| 24-digit code representing feature vector for event classification

-   **De. delphis, etc.** \| event classification probability for *Delphinus delphis* or other species

## üöÄ Train and test delphinID classifiers

Run the code cell below to show a list of *groupClassifications* .csv files saved in the *classifications* folder.

```{r}
data_paths <- list()
if ('classifications' %in% dir()) {
  for (item in dir('classifications')) {
    if (grepl('.csv', item) & !(grepl('barcode', item))) {
      name <- substr(item, 1, nchar(item)-4)
      data_paths[[name]] <- item
    }
  }
}

data_paths
```

These files listed store the event classifications compiled previously from PAMGuard database files - to create a new classifier, **you must add new information (i.e. labels) to a *groupClassifications* file.**

For example, you could add columns representing the true species label, recording date, or recording location. to the .csv file. In the code cell below, specify your target and grouping variables for classification and adjust other classification parameters to tailor your analysis to your needs:

-   **filename** \| select a *groupClassifications* file name from the available files listed above

-   **targetVar** \| target variable for classification (variable for prediction)

-   **groupVar** \| grouping variable for classification (variable for grouping events prior to training/testing split)

-   **minClicks** \| minimum number of click classifications below which events are discarded from training and testing

-   **minWhistles** \| minimum number of whistle classifications below which events are discarded from training and testing

-   **AndOr** \| whether to use minWhistles 'AND' minClicks thresholds or minWhistles 'OR' minClicks thresholds

-   **plotData** \| whether or not to show a PCA plot of the *groupClassifications* data

If **plotData** is set as TRUE, the code cell below will output a PCA plot showing event classifications color-coded by target variable level. The PCA is based on the twelve predictor variables used by delphinID, which represent event-level whistle and click classification probabilities for the set of Northeast Atlantic species the original delphinID models were trained for.

```{r}
filename <- 'groupClassifications-1106252225' #üü©
targetVar <- 'species' #üü©
groupVar <- 'encID' #üü©
minClicks <- 5 #üü©
minWhistles <- 3#üü©
AndOr <- 'or' #üü©

info <- loadResults(filename, 
                    targetVar = targetVar, 
                    groupVar = groupVar,
                    minClicks = minClicks, 
                    minWhistles = minWhistles, 
                    AndOr = AndOr, 
                    plot_data = TRUE, #üü©
                    verbose = FALSE) #üü©

data_cmb <- info$data
vars <- info$variables
targets <- info$targets
groups <- info$groups
```

Finally, use the code cell below to train a new Random Forest classifier model on your new labels using the event predictor variables generated from the delphinID classifications. Several parameters can be adjusted:

-   **mtry** \| number of predictor variables used per decision tree node in the Random Forest model

-   **nodeSize** \| minimum number of events allowed in any terminal node of a decision tree in the Random Forest model

-   **nTrees** \| number of decision trees in the Random Forest model

-   **imputeTrain** \| minimum number of classifications (click or whistle) in an event below which predictor variable values are replaced with mean values from other events with the same targetVar but different groupVar (leave as zero to not use imputeTrain)

-   **pruneTrain** \| percentage of events furthest from their target variable centroid to discard from training data

-   **minGroupScore** \| minimum decision score threshold below which event classifications are discarded.

-   **verbose** \| whether or not to print information during loading (TRUE or FALSE)

-   **export** \| whether or not to export event classification results and classifier model (TRUE or FALSE)

-   **savefolder** \| specify name of folder for exporting results to (leave as NULL to create new folder with current date and time)

The code will output a confusion matrix table of event classifications, which shows true labels along the vertical axis and predicted labels along the horizontal axis. Counts (and percentages in parentheses) given in the table indicate correct classifications (along the diagonal) and incorrect classifications (off the diagonal).

```{r}
mtry <- NULL #üü©
nodeSize <- 5 #üü©
nTrees <- 1000 #üü©
imputeTrain <- 0 #üü©
pruneTrain <- 0.0 #üü©

results <- trainClassifier(data_cmb, vars, 
                           targetVar = targetVar, 
                           groupVar = groupVar,
                           nTrees = nTrees,
                           mtry = mtry,
                           ns = nodeSize,
                           prune = pruneTrain,
                           impute = imputeTrain,
                           verbose = FALSE, #üü©
                           export = FALSE, #üü©
                           savefolder = savefolder) #üü©


```

```{r}
minGroupScore <- 0.25 #üü©
summResults(results, targetVar=targetVar, minScore=minGroupScore)
```
